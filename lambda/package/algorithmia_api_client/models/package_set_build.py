# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PackageSetBuild(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'package_set_build_id': 'int',
        'package_set_name': 'str',
        'image_tag': 'str',
        'created_at': 'str',
        'is_deprecated': 'bool',
        'version': 'int'
    }

    attribute_map = {
        'package_set_build_id': 'packageSetBuildId',
        'package_set_name': 'packageSetName',
        'image_tag': 'imageTag',
        'created_at': 'createdAt',
        'is_deprecated': 'isDeprecated',
        'version': 'version'
    }

    def __init__(self, package_set_build_id=None, package_set_name=None, image_tag=None, created_at=None, is_deprecated=None, version=None):  # noqa: E501
        """PackageSetBuild - a model defined in OpenAPI"""  # noqa: E501

        self._package_set_build_id = None
        self._package_set_name = None
        self._image_tag = None
        self._created_at = None
        self._is_deprecated = None
        self._version = None
        self.discriminator = None

        if package_set_build_id is not None:
            self.package_set_build_id = package_set_build_id
        if package_set_name is not None:
            self.package_set_name = package_set_name
        if image_tag is not None:
            self.image_tag = image_tag
        if created_at is not None:
            self.created_at = created_at
        if is_deprecated is not None:
            self.is_deprecated = is_deprecated
        if version is not None:
            self.version = version

    @property
    def package_set_build_id(self):
        """Gets the package_set_build_id of this PackageSetBuild.  # noqa: E501


        :return: The package_set_build_id of this PackageSetBuild.  # noqa: E501
        :rtype: int
        """
        return self._package_set_build_id

    @package_set_build_id.setter
    def package_set_build_id(self, package_set_build_id):
        """Sets the package_set_build_id of this PackageSetBuild.


        :param package_set_build_id: The package_set_build_id of this PackageSetBuild.  # noqa: E501
        :type: int
        """

        self._package_set_build_id = package_set_build_id

    @property
    def package_set_name(self):
        """Gets the package_set_name of this PackageSetBuild.  # noqa: E501


        :return: The package_set_name of this PackageSetBuild.  # noqa: E501
        :rtype: str
        """
        return self._package_set_name

    @package_set_name.setter
    def package_set_name(self, package_set_name):
        """Sets the package_set_name of this PackageSetBuild.


        :param package_set_name: The package_set_name of this PackageSetBuild.  # noqa: E501
        :type: str
        """

        self._package_set_name = package_set_name

    @property
    def image_tag(self):
        """Gets the image_tag of this PackageSetBuild.  # noqa: E501


        :return: The image_tag of this PackageSetBuild.  # noqa: E501
        :rtype: str
        """
        return self._image_tag

    @image_tag.setter
    def image_tag(self, image_tag):
        """Sets the image_tag of this PackageSetBuild.


        :param image_tag: The image_tag of this PackageSetBuild.  # noqa: E501
        :type: str
        """

        self._image_tag = image_tag

    @property
    def created_at(self):
        """Gets the created_at of this PackageSetBuild.  # noqa: E501


        :return: The created_at of this PackageSetBuild.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PackageSetBuild.


        :param created_at: The created_at of this PackageSetBuild.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def is_deprecated(self):
        """Gets the is_deprecated of this PackageSetBuild.  # noqa: E501


        :return: The is_deprecated of this PackageSetBuild.  # noqa: E501
        :rtype: bool
        """
        return self._is_deprecated

    @is_deprecated.setter
    def is_deprecated(self, is_deprecated):
        """Sets the is_deprecated of this PackageSetBuild.


        :param is_deprecated: The is_deprecated of this PackageSetBuild.  # noqa: E501
        :type: bool
        """

        self._is_deprecated = is_deprecated

    @property
    def version(self):
        """Gets the version of this PackageSetBuild.  # noqa: E501


        :return: The version of this PackageSetBuild.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PackageSetBuild.


        :param version: The version of this PackageSetBuild.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageSetBuild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
