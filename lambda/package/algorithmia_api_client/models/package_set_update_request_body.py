# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PackageSetUpdateRequestBody(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_name': 'str',
        'description': 'str',
        'machine_type': 'str',
        'base_builder_image': 'str',
        'base_runner_image': 'str',
        'language': 'str',
        'is_default': 'bool',
        'status': 'str'
    }

    attribute_map = {
        'display_name': 'display_name',
        'description': 'description',
        'machine_type': 'machine_type',
        'base_builder_image': 'base_builder_image',
        'base_runner_image': 'base_runner_image',
        'language': 'language',
        'is_default': 'is_default',
        'status': 'status'
    }

    def __init__(self, display_name=None, description=None, machine_type=None, base_builder_image=None, base_runner_image=None, language=None, is_default=None, status=None):  # noqa: E501
        """PackageSetUpdateRequestBody - a model defined in OpenAPI"""  # noqa: E501

        self._display_name = None
        self._description = None
        self._machine_type = None
        self._base_builder_image = None
        self._base_runner_image = None
        self._language = None
        self._is_default = None
        self._status = None
        self.discriminator = None

        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if machine_type is not None:
            self.machine_type = machine_type
        if base_builder_image is not None:
            self.base_builder_image = base_builder_image
        if base_runner_image is not None:
            self.base_runner_image = base_runner_image
        if language is not None:
            self.language = language
        if is_default is not None:
            self.is_default = is_default
        if status is not None:
            self.status = status

    @property
    def display_name(self):
        """Gets the display_name of this PackageSetUpdateRequestBody.  # noqa: E501


        :return: The display_name of this PackageSetUpdateRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PackageSetUpdateRequestBody.


        :param display_name: The display_name of this PackageSetUpdateRequestBody.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this PackageSetUpdateRequestBody.  # noqa: E501


        :return: The description of this PackageSetUpdateRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PackageSetUpdateRequestBody.


        :param description: The description of this PackageSetUpdateRequestBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def machine_type(self):
        """Gets the machine_type of this PackageSetUpdateRequestBody.  # noqa: E501


        :return: The machine_type of this PackageSetUpdateRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this PackageSetUpdateRequestBody.


        :param machine_type: The machine_type of this PackageSetUpdateRequestBody.  # noqa: E501
        :type: str
        """

        self._machine_type = machine_type

    @property
    def base_builder_image(self):
        """Gets the base_builder_image of this PackageSetUpdateRequestBody.  # noqa: E501


        :return: The base_builder_image of this PackageSetUpdateRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._base_builder_image

    @base_builder_image.setter
    def base_builder_image(self, base_builder_image):
        """Sets the base_builder_image of this PackageSetUpdateRequestBody.


        :param base_builder_image: The base_builder_image of this PackageSetUpdateRequestBody.  # noqa: E501
        :type: str
        """

        self._base_builder_image = base_builder_image

    @property
    def base_runner_image(self):
        """Gets the base_runner_image of this PackageSetUpdateRequestBody.  # noqa: E501


        :return: The base_runner_image of this PackageSetUpdateRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._base_runner_image

    @base_runner_image.setter
    def base_runner_image(self, base_runner_image):
        """Sets the base_runner_image of this PackageSetUpdateRequestBody.


        :param base_runner_image: The base_runner_image of this PackageSetUpdateRequestBody.  # noqa: E501
        :type: str
        """

        self._base_runner_image = base_runner_image

    @property
    def language(self):
        """Gets the language of this PackageSetUpdateRequestBody.  # noqa: E501


        :return: The language of this PackageSetUpdateRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this PackageSetUpdateRequestBody.


        :param language: The language of this PackageSetUpdateRequestBody.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def is_default(self):
        """Gets the is_default of this PackageSetUpdateRequestBody.  # noqa: E501


        :return: The is_default of this PackageSetUpdateRequestBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this PackageSetUpdateRequestBody.


        :param is_default: The is_default of this PackageSetUpdateRequestBody.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def status(self):
        """Gets the status of this PackageSetUpdateRequestBody.  # noqa: E501


        :return: The status of this PackageSetUpdateRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PackageSetUpdateRequestBody.


        :param status: The status of this PackageSetUpdateRequestBody.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageSetUpdateRequestBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
