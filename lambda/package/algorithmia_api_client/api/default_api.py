# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from algorithmia_api_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_organization_member(self, org_name, username, **kwargs):  # noqa: E501
        """Add a user as a member of a given organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_organization_member(org_name, username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: Organization name (required)
        :param str username: The user's username (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_organization_member_with_http_info(org_name, username, **kwargs)  # noqa: E501
        else:
            (data) = self.add_organization_member_with_http_info(org_name, username, **kwargs)  # noqa: E501
            return data

    def add_organization_member_with_http_info(self, org_name, username, **kwargs):  # noqa: E501
        """Add a user as a member of a given organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_organization_member_with_http_info(org_name, username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: Organization name (required)
        :param str username: The user's username (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['org_name', 'username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_organization_member" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in local_var_params or
                local_var_params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `add_organization_member`")  # noqa: E501
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `add_organization_member`")  # noqa: E501

        if ('org_name' in local_var_params and
                len(local_var_params['org_name']) > 30):
            raise ValueError("Invalid value for parameter `org_name` when calling `add_organization_member`, length must be less than or equal to `30`")  # noqa: E501
        if 'org_name' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['org_name']):  # noqa: E501
            raise ValueError("Invalid value for parameter `org_name` when calling `add_organization_member`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `add_organization_member`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `add_organization_member`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'org_name' in local_var_params:
            path_params['orgName'] = local_var_params['org_name']  # noqa: E501
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{orgName}/members/{username}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def algorithms_username_algoname_compile_post(self, username, algoname, **kwargs):  # noqa: E501
        """Compile algorithm  # noqa: E501

        Compiles the latest available source code for an algorithm, resulting in a new hash version of an algorithm available for publishing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.algorithms_username_algoname_compile_post(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :return: VersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.algorithms_username_algoname_compile_post_with_http_info(username, algoname, **kwargs)  # noqa: E501
        else:
            (data) = self.algorithms_username_algoname_compile_post_with_http_info(username, algoname, **kwargs)  # noqa: E501
            return data

    def algorithms_username_algoname_compile_post_with_http_info(self, username, algoname, **kwargs):  # noqa: E501
        """Compile algorithm  # noqa: E501

        Compiles the latest available source code for an algorithm, resulting in a new hash version of an algorithm available for publishing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.algorithms_username_algoname_compile_post_with_http_info(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :return: VersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'algoname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method algorithms_username_algoname_compile_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `algorithms_username_algoname_compile_post`")  # noqa: E501
        # verify the required parameter 'algoname' is set
        if ('algoname' not in local_var_params or
                local_var_params['algoname'] is None):
            raise ValueError("Missing the required parameter `algoname` when calling `algorithms_username_algoname_compile_post`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `algorithms_username_algoname_compile_post`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `algorithms_username_algoname_compile_post`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'algoname' in local_var_params:
            path_params['algoname'] = local_var_params['algoname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/algorithms/{username}/{algoname}/compile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VersionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commit_log_for_repository(self, username, algoname, **kwargs):  # noqa: E501
        """Gets the list of commits for a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commit_log_for_repository(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :param str since: The first commit SHA of the repository to list in the commits. This is included in the result list.
        :param str until: The last commit SHA of the repository to list in the commits. This is included in the result list.
        :return: RepositoryCommitLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commit_log_for_repository_with_http_info(username, algoname, **kwargs)  # noqa: E501
        else:
            (data) = self.commit_log_for_repository_with_http_info(username, algoname, **kwargs)  # noqa: E501
            return data

    def commit_log_for_repository_with_http_info(self, username, algoname, **kwargs):  # noqa: E501
        """Gets the list of commits for a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commit_log_for_repository_with_http_info(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :param str since: The first commit SHA of the repository to list in the commits. This is included in the result list.
        :param str until: The last commit SHA of the repository to list in the commits. This is included in the result list.
        :return: RepositoryCommitLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'algoname', 'since', 'until']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commit_log_for_repository" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `commit_log_for_repository`")  # noqa: E501
        # verify the required parameter 'algoname' is set
        if ('algoname' not in local_var_params or
                local_var_params['algoname'] is None):
            raise ValueError("Missing the required parameter `algoname` when calling `commit_log_for_repository`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `commit_log_for_repository`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `commit_log_for_repository`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'algoname' in local_var_params:
            path_params['algoname'] = local_var_params['algoname']  # noqa: E501

        query_params = []
        if 'since' in local_var_params:
            query_params.append(('since', local_var_params['since']))  # noqa: E501
        if 'until' in local_var_params:
            query_params.append(('until', local_var_params['until']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/algorithms/{username}/{algoname}/log', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepositoryCommitLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_algorithm(self, username, create_request, **kwargs):  # noqa: E501
        """Create Algorithm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_algorithm(username, create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param CreateRequest create_request: Algorithm Create Request (required)
        :return: HashResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_algorithm_with_http_info(username, create_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_algorithm_with_http_info(username, create_request, **kwargs)  # noqa: E501
            return data

    def create_algorithm_with_http_info(self, username, create_request, **kwargs):  # noqa: E501
        """Create Algorithm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_algorithm_with_http_info(username, create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param CreateRequest create_request: Algorithm Create Request (required)
        :return: HashResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'create_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_algorithm" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `create_algorithm`")  # noqa: E501
        # verify the required parameter 'create_request' is set
        if ('create_request' not in local_var_params or
                local_var_params['create_request'] is None):
            raise ValueError("Missing the required parameter `create_request` when calling `create_algorithm`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `create_algorithm`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `create_algorithm`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_request' in local_var_params:
            body_params = local_var_params['create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/algorithms/{username}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HashResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_organization(self, organization, **kwargs):  # noqa: E501
        """Creates an Organization owned by the caller  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_organization(organization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Organization organization: Request with Organization (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_organization_with_http_info(organization, **kwargs)  # noqa: E501
        else:
            (data) = self.create_organization_with_http_info(organization, **kwargs)  # noqa: E501
            return data

    def create_organization_with_http_info(self, organization, **kwargs):  # noqa: E501
        """Creates an Organization owned by the caller  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_organization_with_http_info(organization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Organization organization: Request with Organization (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_organization" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in local_var_params or
                local_var_params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `create_organization`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'organization' in local_var_params:
            body_params = local_var_params['organization']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_user(self, user, **kwargs):  # noqa: E501
        """Creates an Algorithmia user in the system  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param User user: Request with User (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_user_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.create_user_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def create_user_with_http_info(self, user, **kwargs):  # noqa: E501
        """Creates an Algorithmia user in the system  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param User user: Request with User (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in local_var_params or
                local_var_params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `create_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user' in local_var_params:
            body_params = local_var_params['user']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_algorithm(self, username, algoname, **kwargs):  # noqa: E501
        """Delete Algorithm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_algorithm(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :return: VersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_algorithm_with_http_info(username, algoname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_algorithm_with_http_info(username, algoname, **kwargs)  # noqa: E501
            return data

    def delete_algorithm_with_http_info(self, username, algoname, **kwargs):  # noqa: E501
        """Delete Algorithm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_algorithm_with_http_info(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :return: VersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'algoname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_algorithm" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `delete_algorithm`")  # noqa: E501
        # verify the required parameter 'algoname' is set
        if ('algoname' not in local_var_params or
                local_var_params['algoname'] is None):
            raise ValueError("Missing the required parameter `algoname` when calling `delete_algorithm`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `delete_algorithm`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `delete_algorithm`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'algoname' in local_var_params:
            path_params['algoname'] = local_var_params['algoname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/algorithms/{username}/{algoname}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VersionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_config_entry(self, keyname, **kwargs):  # noqa: E501
        """Delete a config entry represented by the provided keyname  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_config_entry(keyname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keyname: The keyname for the config map entry (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_config_entry_with_http_info(keyname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_config_entry_with_http_info(keyname, **kwargs)  # noqa: E501
            return data

    def delete_config_entry_with_http_info(self, keyname, **kwargs):  # noqa: E501
        """Delete a config entry represented by the provided keyname  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_config_entry_with_http_info(keyname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keyname: The keyname for the config map entry (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['keyname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_config_entry" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyname' is set
        if ('keyname' not in local_var_params or
                local_var_params['keyname'] is None):
            raise ValueError("Missing the required parameter `keyname` when calling `delete_config_entry`")  # noqa: E501

        if ('keyname' in local_var_params and
                len(local_var_params['keyname']) > 64):
            raise ValueError("Invalid value for parameter `keyname` when calling `delete_config_entry`, length must be less than or equal to `64`")  # noqa: E501
        if 'keyname' in local_var_params and not re.search(r'^[\\w][\\w-.]*[\\w]$', local_var_params['keyname']):  # noqa: E501
            raise ValueError("Invalid value for parameter `keyname` when calling `delete_config_entry`, must conform to the pattern `/^[\\w][\\w-.]*[\\w]$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'keyname' in local_var_params:
            path_params['keyname'] = local_var_params['keyname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/config/frontend/{keyname}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_favicon(self, **kwargs):  # noqa: E501
        """Delete favicon for the Algorithmia instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_favicon(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_favicon_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_favicon_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_favicon_with_http_info(self, **kwargs):  # noqa: E501
        """Delete favicon for the Algorithmia instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_favicon_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_favicon" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/config/favicon', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_logo(self, **kwargs):  # noqa: E501
        """Delete logo for the Algorithmia instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_logo(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_logo_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_logo_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_logo_with_http_info(self, **kwargs):  # noqa: E501
        """Delete logo for the Algorithmia instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_logo_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_logo" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/config/logo', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_organization(self, org_name, **kwargs):  # noqa: E501
        """Delete an organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: Organization name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_organization_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_organization_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def delete_organization_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """Delete an organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: Organization name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organization" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in local_var_params or
                local_var_params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `delete_organization`")  # noqa: E501

        if ('org_name' in local_var_params and
                len(local_var_params['org_name']) > 30):
            raise ValueError("Invalid value for parameter `org_name` when calling `delete_organization`, length must be less than or equal to `30`")  # noqa: E501
        if 'org_name' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['org_name']):  # noqa: E501
            raise ValueError("Invalid value for parameter `org_name` when calling `delete_organization`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'org_name' in local_var_params:
            path_params['orgName'] = local_var_params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{orgName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user(self, username, **kwargs):  # noqa: E501
        """Delete a user represented by the provided username  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def delete_user_with_http_info(self, username, **kwargs):  # noqa: E501
        """Delete a user represented by the provided username  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `delete_user`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `delete_user`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `delete_user`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{username}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_algorithm(self, username, algoname, **kwargs):  # noqa: E501
        """Get Algorithm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :return: VersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_algorithm_with_http_info(username, algoname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_algorithm_with_http_info(username, algoname, **kwargs)  # noqa: E501
            return data

    def get_algorithm_with_http_info(self, username, algoname, **kwargs):  # noqa: E501
        """Get Algorithm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_with_http_info(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :return: VersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'algoname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_algorithm" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_algorithm`")  # noqa: E501
        # verify the required parameter 'algoname' is set
        if ('algoname' not in local_var_params or
                local_var_params['algoname'] is None):
            raise ValueError("Missing the required parameter `algoname` when calling `get_algorithm`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `get_algorithm`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `get_algorithm`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'algoname' in local_var_params:
            path_params['algoname'] = local_var_params['algoname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/algorithms/{username}/{algoname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VersionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_algorithm_build_by_id(self, username, algoname, buildid, **kwargs):  # noqa: E501
        """Get individual algorithm build by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_build_by_id(username, algoname, buildid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :param str buildid: Build ID (required)
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_algorithm_build_by_id_with_http_info(username, algoname, buildid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_algorithm_build_by_id_with_http_info(username, algoname, buildid, **kwargs)  # noqa: E501
            return data

    def get_algorithm_build_by_id_with_http_info(self, username, algoname, buildid, **kwargs):  # noqa: E501
        """Get individual algorithm build by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_build_by_id_with_http_info(username, algoname, buildid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :param str buildid: Build ID (required)
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'algoname', 'buildid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_algorithm_build_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_algorithm_build_by_id`")  # noqa: E501
        # verify the required parameter 'algoname' is set
        if ('algoname' not in local_var_params or
                local_var_params['algoname'] is None):
            raise ValueError("Missing the required parameter `algoname` when calling `get_algorithm_build_by_id`")  # noqa: E501
        # verify the required parameter 'buildid' is set
        if ('buildid' not in local_var_params or
                local_var_params['buildid'] is None):
            raise ValueError("Missing the required parameter `buildid` when calling `get_algorithm_build_by_id`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `get_algorithm_build_by_id`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `get_algorithm_build_by_id`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'algoname' in local_var_params:
            path_params['algoname'] = local_var_params['algoname']  # noqa: E501
        if 'buildid' in local_var_params:
            path_params['buildid'] = local_var_params['buildid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/algorithms/{username}/{algoname}/builds/{buildid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_algorithm_build_logs(self, username, algoname, buildid, **kwargs):  # noqa: E501
        """Get Algorithm build logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_build_logs(username, algoname, buildid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :param str buildid: Build ID (required)
        :return: BuildLogs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_algorithm_build_logs_with_http_info(username, algoname, buildid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_algorithm_build_logs_with_http_info(username, algoname, buildid, **kwargs)  # noqa: E501
            return data

    def get_algorithm_build_logs_with_http_info(self, username, algoname, buildid, **kwargs):  # noqa: E501
        """Get Algorithm build logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_build_logs_with_http_info(username, algoname, buildid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :param str buildid: Build ID (required)
        :return: BuildLogs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'algoname', 'buildid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_algorithm_build_logs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_algorithm_build_logs`")  # noqa: E501
        # verify the required parameter 'algoname' is set
        if ('algoname' not in local_var_params or
                local_var_params['algoname'] is None):
            raise ValueError("Missing the required parameter `algoname` when calling `get_algorithm_build_logs`")  # noqa: E501
        # verify the required parameter 'buildid' is set
        if ('buildid' not in local_var_params or
                local_var_params['buildid'] is None):
            raise ValueError("Missing the required parameter `buildid` when calling `get_algorithm_build_logs`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `get_algorithm_build_logs`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `get_algorithm_build_logs`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'algoname' in local_var_params:
            path_params['algoname'] = local_var_params['algoname']  # noqa: E501
        if 'buildid' in local_var_params:
            path_params['buildid'] = local_var_params['buildid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/algorithms/{username}/{algoname}/builds/{buildid}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildLogs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_algorithm_builds(self, username, algoname, **kwargs):  # noqa: E501
        """Get Algorithm builds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_builds(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :param int limit: The number of results to return in a single page
        :param str marker: Encoded pagination cursor
        :return: PagedBuildsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_algorithm_builds_with_http_info(username, algoname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_algorithm_builds_with_http_info(username, algoname, **kwargs)  # noqa: E501
            return data

    def get_algorithm_builds_with_http_info(self, username, algoname, **kwargs):  # noqa: E501
        """Get Algorithm builds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_builds_with_http_info(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :param int limit: The number of results to return in a single page
        :param str marker: Encoded pagination cursor
        :return: PagedBuildsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'algoname', 'limit', 'marker']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_algorithm_builds" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_algorithm_builds`")  # noqa: E501
        # verify the required parameter 'algoname' is set
        if ('algoname' not in local_var_params or
                local_var_params['algoname'] is None):
            raise ValueError("Missing the required parameter `algoname` when calling `get_algorithm_builds`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `get_algorithm_builds`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `get_algorithm_builds`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_algorithm_builds`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'algoname' in local_var_params:
            path_params['algoname'] = local_var_params['algoname']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'marker' in local_var_params:
            query_params.append(('marker', local_var_params['marker']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/algorithms/{username}/{algoname}/builds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedBuildsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_algorithm_hash_version(self, username, algoname, algohash, **kwargs):  # noqa: E501
        """Get Algorithm by Hash Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_hash_version(username, algoname, algohash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :param str algohash: Algorithm hash (required)
        :return: VersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_algorithm_hash_version_with_http_info(username, algoname, algohash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_algorithm_hash_version_with_http_info(username, algoname, algohash, **kwargs)  # noqa: E501
            return data

    def get_algorithm_hash_version_with_http_info(self, username, algoname, algohash, **kwargs):  # noqa: E501
        """Get Algorithm by Hash Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_hash_version_with_http_info(username, algoname, algohash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :param str algohash: Algorithm hash (required)
        :return: VersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'algoname', 'algohash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_algorithm_hash_version" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_algorithm_hash_version`")  # noqa: E501
        # verify the required parameter 'algoname' is set
        if ('algoname' not in local_var_params or
                local_var_params['algoname'] is None):
            raise ValueError("Missing the required parameter `algoname` when calling `get_algorithm_hash_version`")  # noqa: E501
        # verify the required parameter 'algohash' is set
        if ('algohash' not in local_var_params or
                local_var_params['algohash'] is None):
            raise ValueError("Missing the required parameter `algohash` when calling `get_algorithm_hash_version`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `get_algorithm_hash_version`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `get_algorithm_hash_version`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'algoname' in local_var_params:
            path_params['algoname'] = local_var_params['algoname']  # noqa: E501
        if 'algohash' in local_var_params:
            path_params['algohash'] = local_var_params['algohash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/algorithms/{username}/{algoname}/versions/{algohash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VersionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_algorithm_versions(self, username, algoname, **kwargs):  # noqa: E501
        """Get Algorithm versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_versions(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :param int limit: The number of results to return in a single page
        :param str marker: Encoded pagination cursor
        :param bool published: Algorithm version's published state
        :param bool callable: Algorithm version's callable visibility
        :return: PagedVersionsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_algorithm_versions_with_http_info(username, algoname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_algorithm_versions_with_http_info(username, algoname, **kwargs)  # noqa: E501
            return data

    def get_algorithm_versions_with_http_info(self, username, algoname, **kwargs):  # noqa: E501
        """Get Algorithm versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_versions_with_http_info(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :param int limit: The number of results to return in a single page
        :param str marker: Encoded pagination cursor
        :param bool published: Algorithm version's published state
        :param bool callable: Algorithm version's callable visibility
        :return: PagedVersionsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'algoname', 'limit', 'marker', 'published', 'callable']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_algorithm_versions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_algorithm_versions`")  # noqa: E501
        # verify the required parameter 'algoname' is set
        if ('algoname' not in local_var_params or
                local_var_params['algoname'] is None):
            raise ValueError("Missing the required parameter `algoname` when calling `get_algorithm_versions`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `get_algorithm_versions`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `get_algorithm_versions`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_algorithm_versions`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'algoname' in local_var_params:
            path_params['algoname'] = local_var_params['algoname']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'marker' in local_var_params:
            query_params.append(('marker', local_var_params['marker']))  # noqa: E501
        if 'published' in local_var_params:
            query_params.append(('published', local_var_params['published']))  # noqa: E501
        if 'callable' in local_var_params:
            query_params.append(('callable', local_var_params['callable']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/algorithms/{username}/{algoname}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedVersionsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_config_entry(self, keyname, **kwargs):  # noqa: E501
        """Get a frontend config entry represeted by the provided keyname  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_config_entry(keyname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keyname: The keyname for the config map entry (required)
        :return: FrontendConfigurationEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_config_entry_with_http_info(keyname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_config_entry_with_http_info(keyname, **kwargs)  # noqa: E501
            return data

    def get_config_entry_with_http_info(self, keyname, **kwargs):  # noqa: E501
        """Get a frontend config entry represeted by the provided keyname  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_config_entry_with_http_info(keyname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keyname: The keyname for the config map entry (required)
        :return: FrontendConfigurationEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['keyname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_config_entry" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyname' is set
        if ('keyname' not in local_var_params or
                local_var_params['keyname'] is None):
            raise ValueError("Missing the required parameter `keyname` when calling `get_config_entry`")  # noqa: E501

        if ('keyname' in local_var_params and
                len(local_var_params['keyname']) > 64):
            raise ValueError("Invalid value for parameter `keyname` when calling `get_config_entry`, length must be less than or equal to `64`")  # noqa: E501
        if 'keyname' in local_var_params and not re.search(r'^[\\w][\\w-.]*[\\w]$', local_var_params['keyname']):  # noqa: E501
            raise ValueError("Invalid value for parameter `keyname` when calling `get_config_entry`, must conform to the pattern `/^[\\w][\\w-.]*[\\w]$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'keyname' in local_var_params:
            path_params['keyname'] = local_var_params['keyname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/config/frontend/{keyname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FrontendConfigurationEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_favicon(self, **kwargs):  # noqa: E501
        """Get favicon for the Algorithmia instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_favicon(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_favicon_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_favicon_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_favicon_with_http_info(self, **kwargs):  # noqa: E501
        """Get favicon for the Algorithmia instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_favicon_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_favicon" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/config/favicon', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_frontend_config_entries(self, **kwargs):  # noqa: E501
        """Lists all frontend configuration values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_frontend_config_entries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: The number of results to return in a single page
        :param str marker: Encoded pagination cursor
        :return: PagedResultList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_frontend_config_entries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_frontend_config_entries_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_frontend_config_entries_with_http_info(self, **kwargs):  # noqa: E501
        """Lists all frontend configuration values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_frontend_config_entries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: The number of results to return in a single page
        :param str marker: Encoded pagination cursor
        :return: PagedResultList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'marker']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_frontend_config_entries" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_frontend_config_entries`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'marker' in local_var_params:
            query_params.append(('marker', local_var_params['marker']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/config/frontend', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResultList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_logo(self, **kwargs):  # noqa: E501
        """Get logo for the Algorithmia instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logo(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_logo_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_logo_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_logo_with_http_info(self, **kwargs):  # noqa: E501
        """Get logo for the Algorithmia instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logo_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_logo" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/config/logo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organization(self, org_name, **kwargs):  # noqa: E501
        """Get an organization represented by the provided orgName  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: Organization name (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organization_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def get_organization_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """Get an organization represented by the provided orgName  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: Organization name (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organization" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in local_var_params or
                local_var_params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `get_organization`")  # noqa: E501

        if ('org_name' in local_var_params and
                len(local_var_params['org_name']) > 30):
            raise ValueError("Invalid value for parameter `org_name` when calling `get_organization`, length must be less than or equal to `30`")  # noqa: E501
        if 'org_name' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['org_name']):  # noqa: E501
            raise ValueError("Invalid value for parameter `org_name` when calling `get_organization`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'org_name' in local_var_params:
            path_params['orgName'] = local_var_params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{orgName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organizations(self, **kwargs):  # noqa: E501
        """Lists all organizations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: The number of results to return in a single page
        :param str marker: Encoded pagination cursor
        :return: PagedResultList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_organizations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_organizations_with_http_info(self, **kwargs):  # noqa: E501
        """Lists all organizations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: The number of results to return in a single page
        :param str marker: Encoded pagination cursor
        :return: PagedResultList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'marker']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_organizations`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'marker' in local_var_params:
            query_params.append(('marker', local_var_params['marker']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResultList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_package_set_builds(self, package_set_name, **kwargs):  # noqa: E501
        """Name of a package set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_set_builds(package_set_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_set_name: The name of a package set (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_package_set_builds_with_http_info(package_set_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_package_set_builds_with_http_info(package_set_name, **kwargs)  # noqa: E501
            return data

    def get_package_set_builds_with_http_info(self, package_set_name, **kwargs):  # noqa: E501
        """Name of a package set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_set_builds_with_http_info(package_set_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_set_name: The name of a package set (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_set_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_package_set_builds" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_set_name' is set
        if ('package_set_name' not in local_var_params or
                local_var_params['package_set_name'] is None):
            raise ValueError("Missing the required parameter `package_set_name` when calling `get_package_set_builds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_set_name' in local_var_params:
            path_params['package_set_name'] = local_var_params['package_set_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/package-sets/{package_set_name}/builds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user(self, username, **kwargs):  # noqa: E501
        """Get a user represented by the provided username  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_user_with_http_info(self, username, **kwargs):  # noqa: E501
        """Get a user represented by the provided username  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_user`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `get_user`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `get_user`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{username}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users(self, **kwargs):  # noqa: E501
        """Lists all managed users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: The number of results to return in a single page
        :param str marker: Encoded pagination cursor
        :return: PagedResultList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_users_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_users_with_http_info(self, **kwargs):  # noqa: E501
        """Lists all managed users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: The number of results to return in a single page
        :param str marker: Encoded pagination cursor
        :return: PagedResultList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'marker']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_users`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'marker' in local_var_params:
            query_params.append(('marker', local_var_params['marker']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResultList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_entities_for_label(self, username, label, **kwargs):  # noqa: E501
        """List the unique set of entities associated with the token associated to the connection established between the user and the SCM configuration (determined by label)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_entities_for_label(username, label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str label: The SCM configuration label (required)
        :return: ScmEntities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_entities_for_label_with_http_info(username, label, **kwargs)  # noqa: E501
        else:
            (data) = self.list_entities_for_label_with_http_info(username, label, **kwargs)  # noqa: E501
            return data

    def list_entities_for_label_with_http_info(self, username, label, **kwargs):  # noqa: E501
        """List the unique set of entities associated with the token associated to the connection established between the user and the SCM configuration (determined by label)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_entities_for_label_with_http_info(username, label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str label: The SCM configuration label (required)
        :return: ScmEntities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_entities_for_label" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `list_entities_for_label`")  # noqa: E501
        # verify the required parameter 'label' is set
        if ('label' not in local_var_params or
                local_var_params['label'] is None):
            raise ValueError("Missing the required parameter `label` when calling `list_entities_for_label`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `list_entities_for_label`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `list_entities_for_label`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        if ('label' in local_var_params and
                len(local_var_params['label']) > 60):
            raise ValueError("Invalid value for parameter `label` when calling `list_entities_for_label`, length must be less than or equal to `60`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'label' in local_var_params:
            path_params['label'] = local_var_params['label']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{username}/scm-entities/{label}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScmEntities',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_members(self, org_name, **kwargs):  # noqa: E501
        """List of members with their roles in a given organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_members(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: Organization name (required)
        :return: PagedResultList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_members_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_members_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def list_members_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """List of members with their roles in a given organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_members_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: Organization name (required)
        :return: PagedResultList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_members" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in local_var_params or
                local_var_params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `list_members`")  # noqa: E501

        if ('org_name' in local_var_params and
                len(local_var_params['org_name']) > 30):
            raise ValueError("Invalid value for parameter `org_name` when calling `list_members`, length must be less than or equal to `30`")  # noqa: E501
        if 'org_name' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['org_name']):  # noqa: E501
            raise ValueError("Invalid value for parameter `org_name` when calling `list_members`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'org_name' in local_var_params:
            path_params['orgName'] = local_var_params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{orgName}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResultList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_scm_connections(self, username, **kwargs):  # noqa: E501
        """List the SCM connections associated with this user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_scm_connections(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :return: ScmConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_scm_connections_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.list_scm_connections_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def list_scm_connections_with_http_info(self, username, **kwargs):  # noqa: E501
        """List the SCM connections associated with this user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_scm_connections_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :return: ScmConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_scm_connections" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `list_scm_connections`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `list_scm_connections`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `list_scm_connections`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{username}/scm-connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScmConnections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_scm_integrations(self, **kwargs):  # noqa: E501
        """Get the list of SCM systems that have been configured with this cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_scm_integrations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ScmIntegrations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_scm_integrations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_scm_integrations_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_scm_integrations_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of SCM systems that have been configured with this cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_scm_integrations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ScmIntegrations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_scm_integrations" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scm-integrations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScmIntegrations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def publish_algorithm(self, username, algoname, version_request, **kwargs):  # noqa: E501
        """Publish Algorithm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.publish_algorithm(username, algoname, version_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :param VersionRequest version_request: Publish Version Request (required)
        :return: VersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.publish_algorithm_with_http_info(username, algoname, version_request, **kwargs)  # noqa: E501
        else:
            (data) = self.publish_algorithm_with_http_info(username, algoname, version_request, **kwargs)  # noqa: E501
            return data

    def publish_algorithm_with_http_info(self, username, algoname, version_request, **kwargs):  # noqa: E501
        """Publish Algorithm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.publish_algorithm_with_http_info(username, algoname, version_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :param VersionRequest version_request: Publish Version Request (required)
        :return: VersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'algoname', 'version_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method publish_algorithm" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `publish_algorithm`")  # noqa: E501
        # verify the required parameter 'algoname' is set
        if ('algoname' not in local_var_params or
                local_var_params['algoname'] is None):
            raise ValueError("Missing the required parameter `algoname` when calling `publish_algorithm`")  # noqa: E501
        # verify the required parameter 'version_request' is set
        if ('version_request' not in local_var_params or
                local_var_params['version_request'] is None):
            raise ValueError("Missing the required parameter `version_request` when calling `publish_algorithm`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `publish_algorithm`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `publish_algorithm`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'algoname' in local_var_params:
            path_params['algoname'] = local_var_params['algoname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'version_request' in local_var_params:
            body_params = local_var_params['version_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/algorithms/{username}/{algoname}/versions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VersionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_organization_member(self, org_name, username, **kwargs):  # noqa: E501
        """Remove a user from an organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_organization_member(org_name, username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: Organization name (required)
        :param str username: The user's username (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_organization_member_with_http_info(org_name, username, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_organization_member_with_http_info(org_name, username, **kwargs)  # noqa: E501
            return data

    def remove_organization_member_with_http_info(self, org_name, username, **kwargs):  # noqa: E501
        """Remove a user from an organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_organization_member_with_http_info(org_name, username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: Organization name (required)
        :param str username: The user's username (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['org_name', 'username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_organization_member" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in local_var_params or
                local_var_params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `remove_organization_member`")  # noqa: E501
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `remove_organization_member`")  # noqa: E501

        if ('org_name' in local_var_params and
                len(local_var_params['org_name']) > 30):
            raise ValueError("Invalid value for parameter `org_name` when calling `remove_organization_member`, length must be less than or equal to `30`")  # noqa: E501
        if 'org_name' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['org_name']):  # noqa: E501
            raise ValueError("Invalid value for parameter `org_name` when calling `remove_organization_member`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `remove_organization_member`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `remove_organization_member`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'org_name' in local_var_params:
            path_params['orgName'] = local_var_params['org_name']  # noqa: E501
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{orgName}/members/{username}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_algorithm(self, username, algoname, update_request, **kwargs):  # noqa: E501
        """Update Algorithm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_algorithm(username, algoname, update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :param UpdateRequest update_request: Algorithm Update Request (required)
        :return: HashResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_algorithm_with_http_info(username, algoname, update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.update_algorithm_with_http_info(username, algoname, update_request, **kwargs)  # noqa: E501
            return data

    def update_algorithm_with_http_info(self, username, algoname, update_request, **kwargs):  # noqa: E501
        """Update Algorithm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_algorithm_with_http_info(username, algoname, update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str algoname: Algorithm name (required)
        :param UpdateRequest update_request: Algorithm Update Request (required)
        :return: HashResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'algoname', 'update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_algorithm" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `update_algorithm`")  # noqa: E501
        # verify the required parameter 'algoname' is set
        if ('algoname' not in local_var_params or
                local_var_params['algoname'] is None):
            raise ValueError("Missing the required parameter `algoname` when calling `update_algorithm`")  # noqa: E501
        # verify the required parameter 'update_request' is set
        if ('update_request' not in local_var_params or
                local_var_params['update_request'] is None):
            raise ValueError("Missing the required parameter `update_request` when calling `update_algorithm`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `update_algorithm`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `update_algorithm`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'algoname' in local_var_params:
            path_params['algoname'] = local_var_params['algoname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_request' in local_var_params:
            body_params = local_var_params['update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/algorithms/{username}/{algoname}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HashResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_build_status(self, build_id, image_type, status_update_request, **kwargs):  # noqa: E501
        """Update the status of a package set build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_status(build_id, image_type, status_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int build_id: The id of the package set build (required)
        :param str image_type: The image type dependency of the package set build (required)
        :param StatusUpdateRequest status_update_request: The body expected for a package set build status update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_build_status_with_http_info(build_id, image_type, status_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.update_build_status_with_http_info(build_id, image_type, status_update_request, **kwargs)  # noqa: E501
            return data

    def update_build_status_with_http_info(self, build_id, image_type, status_update_request, **kwargs):  # noqa: E501
        """Update the status of a package set build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_status_with_http_info(build_id, image_type, status_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int build_id: The id of the package set build (required)
        :param str image_type: The image type dependency of the package set build (required)
        :param StatusUpdateRequest status_update_request: The body expected for a package set build status update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['build_id', 'image_type', 'status_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_build_status" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'build_id' is set
        if ('build_id' not in local_var_params or
                local_var_params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `update_build_status`")  # noqa: E501
        # verify the required parameter 'image_type' is set
        if ('image_type' not in local_var_params or
                local_var_params['image_type'] is None):
            raise ValueError("Missing the required parameter `image_type` when calling `update_build_status`")  # noqa: E501
        # verify the required parameter 'status_update_request' is set
        if ('status_update_request' not in local_var_params or
                local_var_params['status_update_request'] is None):
            raise ValueError("Missing the required parameter `status_update_request` when calling `update_build_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_id' in local_var_params:
            path_params['build_id'] = local_var_params['build_id']  # noqa: E501
        if 'image_type' in local_var_params:
            path_params['image_type'] = local_var_params['image_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'status_update_request' in local_var_params:
            body_params = local_var_params['status_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/package-sets/builds/{build_id}/{image_type}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_config_entry(self, keyname, frontend_configuration_entry, **kwargs):  # noqa: E501
        """Update or insert a config entry represented by the provided keyname  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_config_entry(keyname, frontend_configuration_entry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keyname: The keyname for the config map entry (required)
        :param FrontendConfigurationEntry frontend_configuration_entry: Request with config entry (required)
        :return: FrontendConfigurationEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_config_entry_with_http_info(keyname, frontend_configuration_entry, **kwargs)  # noqa: E501
        else:
            (data) = self.update_config_entry_with_http_info(keyname, frontend_configuration_entry, **kwargs)  # noqa: E501
            return data

    def update_config_entry_with_http_info(self, keyname, frontend_configuration_entry, **kwargs):  # noqa: E501
        """Update or insert a config entry represented by the provided keyname  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_config_entry_with_http_info(keyname, frontend_configuration_entry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keyname: The keyname for the config map entry (required)
        :param FrontendConfigurationEntry frontend_configuration_entry: Request with config entry (required)
        :return: FrontendConfigurationEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['keyname', 'frontend_configuration_entry']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_config_entry" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyname' is set
        if ('keyname' not in local_var_params or
                local_var_params['keyname'] is None):
            raise ValueError("Missing the required parameter `keyname` when calling `update_config_entry`")  # noqa: E501
        # verify the required parameter 'frontend_configuration_entry' is set
        if ('frontend_configuration_entry' not in local_var_params or
                local_var_params['frontend_configuration_entry'] is None):
            raise ValueError("Missing the required parameter `frontend_configuration_entry` when calling `update_config_entry`")  # noqa: E501

        if ('keyname' in local_var_params and
                len(local_var_params['keyname']) > 64):
            raise ValueError("Invalid value for parameter `keyname` when calling `update_config_entry`, length must be less than or equal to `64`")  # noqa: E501
        if 'keyname' in local_var_params and not re.search(r'^[\\w][\\w-.]*[\\w]$', local_var_params['keyname']):  # noqa: E501
            raise ValueError("Invalid value for parameter `keyname` when calling `update_config_entry`, must conform to the pattern `/^[\\w][\\w-.]*[\\w]$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'keyname' in local_var_params:
            path_params['keyname'] = local_var_params['keyname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'frontend_configuration_entry' in local_var_params:
            body_params = local_var_params['frontend_configuration_entry']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/config/frontend/{keyname}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FrontendConfigurationEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_favicon(self, **kwargs):  # noqa: E501
        """Update favicon for the Algorithmia instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_favicon(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_favicon_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_favicon_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_favicon_with_http_info(self, **kwargs):  # noqa: E501
        """Update favicon for the Algorithmia instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_favicon_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_favicon" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/config/favicon', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_logo(self, **kwargs):  # noqa: E501
        """Update logo for the Algorithmia instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_logo(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_logo_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_logo_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_logo_with_http_info(self, **kwargs):  # noqa: E501
        """Update logo for the Algorithmia instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_logo_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_logo" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/config/logo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_package_set(self, package_set_name, package_set_update_request_body, **kwargs):  # noqa: E501
        """Update a package set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_package_set(package_set_name, package_set_update_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_set_name: The name of a package set (required)
        :param PackageSetUpdateRequestBody package_set_update_request_body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_package_set_with_http_info(package_set_name, package_set_update_request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_package_set_with_http_info(package_set_name, package_set_update_request_body, **kwargs)  # noqa: E501
            return data

    def update_package_set_with_http_info(self, package_set_name, package_set_update_request_body, **kwargs):  # noqa: E501
        """Update a package set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_package_set_with_http_info(package_set_name, package_set_update_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_set_name: The name of a package set (required)
        :param PackageSetUpdateRequestBody package_set_update_request_body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_set_name', 'package_set_update_request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_package_set" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_set_name' is set
        if ('package_set_name' not in local_var_params or
                local_var_params['package_set_name'] is None):
            raise ValueError("Missing the required parameter `package_set_name` when calling `update_package_set`")  # noqa: E501
        # verify the required parameter 'package_set_update_request_body' is set
        if ('package_set_update_request_body' not in local_var_params or
                local_var_params['package_set_update_request_body'] is None):
            raise ValueError("Missing the required parameter `package_set_update_request_body` when calling `update_package_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_set_name' in local_var_params:
            path_params['package_set_name'] = local_var_params['package_set_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'package_set_update_request_body' in local_var_params:
            body_params = local_var_params['package_set_update_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/package-sets/{package_set_name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_scm_connection_owner(self, username, label, scm_connection_owner, **kwargs):  # noqa: E501
        """Update the owner of the SCM connection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_scm_connection_owner(username, label, scm_connection_owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str label: The SCM configuration label (required)
        :param ScmConnectionOwner scm_connection_owner: Body containing the new owner of a connection (required)
        :return: ScmConnectionWithOauthUsername
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_scm_connection_owner_with_http_info(username, label, scm_connection_owner, **kwargs)  # noqa: E501
        else:
            (data) = self.update_scm_connection_owner_with_http_info(username, label, scm_connection_owner, **kwargs)  # noqa: E501
            return data

    def update_scm_connection_owner_with_http_info(self, username, label, scm_connection_owner, **kwargs):  # noqa: E501
        """Update the owner of the SCM connection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_scm_connection_owner_with_http_info(username, label, scm_connection_owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param str label: The SCM configuration label (required)
        :param ScmConnectionOwner scm_connection_owner: Body containing the new owner of a connection (required)
        :return: ScmConnectionWithOauthUsername
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'label', 'scm_connection_owner']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_scm_connection_owner" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `update_scm_connection_owner`")  # noqa: E501
        # verify the required parameter 'label' is set
        if ('label' not in local_var_params or
                local_var_params['label'] is None):
            raise ValueError("Missing the required parameter `label` when calling `update_scm_connection_owner`")  # noqa: E501
        # verify the required parameter 'scm_connection_owner' is set
        if ('scm_connection_owner' not in local_var_params or
                local_var_params['scm_connection_owner'] is None):
            raise ValueError("Missing the required parameter `scm_connection_owner` when calling `update_scm_connection_owner`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `update_scm_connection_owner`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `update_scm_connection_owner`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        if ('label' in local_var_params and
                len(local_var_params['label']) > 60):
            raise ValueError("Invalid value for parameter `label` when calling `update_scm_connection_owner`, length must be less than or equal to `60`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'label' in local_var_params:
            path_params['label'] = local_var_params['label']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'scm_connection_owner' in local_var_params:
            body_params = local_var_params['scm_connection_owner']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{username}/scm-connections/{label}/owner', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScmConnectionWithOauthUsername',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_user(self, username, user, **kwargs):  # noqa: E501
        """Update a user represented by the provided username  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user(username, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param User user: Request with User (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_user_with_http_info(username, user, **kwargs)  # noqa: E501
        else:
            (data) = self.update_user_with_http_info(username, user, **kwargs)  # noqa: E501
            return data

    def update_user_with_http_info(self, username, user, **kwargs):  # noqa: E501
        """Update a user represented by the provided username  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_with_http_info(username, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param User user: Request with User (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `update_user`")  # noqa: E501
        # verify the required parameter 'user' is set
        if ('user' not in local_var_params or
                local_var_params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `update_user`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `update_user`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `update_user`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user' in local_var_params:
            body_params = local_var_params['user']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{username}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_profile_image(self, username, **kwargs):  # noqa: E501
        """Upload a profile picture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_profile_image(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param file avatar:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_profile_image_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_profile_image_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def upload_profile_image_with_http_info(self, username, **kwargs):  # noqa: E501
        """Upload a profile picture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_profile_image_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The user's username (required)
        :param file avatar:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'avatar']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_profile_image" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `upload_profile_image`")  # noqa: E501

        if ('username' in local_var_params and
                len(local_var_params['username']) > 30):
            raise ValueError("Invalid value for parameter `username` when calling `upload_profile_image`, length must be less than or equal to `30`")  # noqa: E501
        if 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ValueError("Invalid value for parameter `username` when calling `upload_profile_image`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'avatar' in local_var_params:
            local_var_files['avatar'] = local_var_params['avatar']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{username}/avatar', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
